[comment encoding = UTF-8 /]
[module class('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::datafoodconsortium::connector::codegen::queries /]
[import org::datafoodconsortium::connector::codegen::ruby::operation /]
[import org::datafoodconsortium::connector::codegen::ruby::common /]
[import org::datafoodconsortium::connector::codegen::ruby::classifier /]

[template public generateClass(model: Model, aClass : Class)]
[file (getProperty('ruby_outputFolder_src') + 'connector/' + generateFileName(aClass.name).concat('.rb'), false, 'UTF-8')]
[generateLicence()/]

[generateImports(aClass)/]
class DataFoodConsortium::Connector::[aClass.name.toUpperFirst()/][generateGeneralization(aClass)/]
[if (aClass.isSemantic() and aClass.generalization->isEmpty())]
    include VirtualAssembly::Semantizer::SemanticObject
[/if]
[if (aClass.isSKOSConceptClass())]
    include DataFoodConsortium::Connector::SKOSHelper
[/if]
[if (aClass.isSemantic())]

    SEMANTIC_TYPE = "[aClass.getValue(aClass.getAppliedStereotype('datafoodconsortium_connector::semantic'), 'map')/]".freeze
[/if]

	[for (property: Property | aClass.ownedAttribute) separator('\n')]
	# @return ['['/][property.type.name /][']'/]
	attr_accessor :[property.name /]
	[/for]

	[for (operation: Operation | aClass.ownedOperation) separator('\n')]
	[generateOperationImplementation(aClass, operation)/]
	[/for]

	[comment [for (operation: Operation | aClass.getUnimplementedOperations()->select(o: Operation | not o.isGetter() and not o.isSetter())) /]
	[comment generateOperationImplementation(aClass, operation)/]
	[comment /for /]

end
[/file]
[/template]

[template public generateGeneralization(classifier: Classifier)]
[if (not (classifier.generalization->isEmpty()))] < [for (generalization: Generalization | classifier.generalization) separator(', ')]DataFoodConsortium::Connector::[generalization.general.name/][/for][/if]
[/template]
