[comment encoding = UTF-8 /]
[module test('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::datafoodconsortium::connector::codegen::queries /]
[import org::datafoodconsortium::connector::codegen::typescript::common /]

[template public generateClassTest(model: Model, aClass : Class)]
[file (getProperty('typescript_outputFolder_test') + 'gen/' + aClass.name.concat('.test.js'), false, 'UTF-8')]
import assert from 'node:assert';
import { test } from 'node:test';
import Connector from '../../lib/Connector.js';
[generateTestImports(aClass, model)/]
import { assertSemanticEqual } from '../utils.js';

const connector = new Connector();

const json = `{
    "@context": "https://www.datafoodconsortium.org",
    "@id": "http://myplatform.com/catalog1",
    "@type": "dfc-b:Catalog",
    "dfc-b:lists": {
        "@id": "http://myplatform.com/catalogItem1"
    },
    "dfc-b:maintainedBy": {
        "@id": "http://myplatform.com/enterprise1"
    }
}`;

test('[aClass.name.toUpperFirst()/]', async (t) => {
	[if (aClass.hasConstructor() and aClass.getDefaultConstructor().hasInputParameter())]
	[let parameters: OrderedSet(Parameter) = aClass.getDefaultConstructorParameters()]
	[let testValues: Sequence(String) = getTestValues(parameters->asSequence())]
	await t.test('#constructor', async (t) => {
		const connector = new Connector();
		[for (p: Parameter | parameters) separator('\n\t\t')][p.generateNewParameter(testValues->at(i), model)/][/for]
		[aClass.generateCompleteNew(parameters, testValues)/]

		[if (not aClass.isBlankNode())]assert.strictEqual('http://example.org/obj', obj.getSemanticId());[/if]

		[for (p: Parameter | parameters) separator('\n')]
		[let actual: String = 'actual' + p.name.toUpperFirst()]
		[let expected: String = 'expected' + p.name.toUpperFirst()]
		[let isAsync: Boolean = (isAsyncParameter(p))]
		[if (p.isBlankNode())]
		const [expected/] = [testValues->at(i)/];
		const [actual/] = [if (isAsync)]await [/if]obj.[p.getGetter().name/]();
		[if (p.isCollection())]
		await [actual/].forEach((actual, i) => {
			t.test(`#[p.name.concat('[${i}]')/]`, () => {
				assertSemanticEqual(actual, [expected.concat('[i]')/]);
			});
		});
		[else]
		await t.test(`#[p.name/]`, () => {
			assertSemanticEqual([actual/], [expected/]);
		});
		[/if]
		[else]
		const [actual/] = [if (isAsync)]await [/if]obj.[p.getGetter().name/]();
		const [expected/] = [testValues->at(i)/];
		[if (p.isPrimitive())]
		await t.test(`#[p.name/]`, () => {
			assert.strictEqual([actual/], [expected/]);
		});
		[else]
		[if (p.isCollection())]
		await [actual/].forEach((actual, i) => {
			t.test(`#[p.name.concat('[${i}]')/]`, () => {
				assert.strictEqual(actual, [expected.concat('[i]')/]);
			});
		});
		[else]
		await t.test(`#[p.name/]`, () => {
			assertSemanticEqual([actual/], [expected/]);
		});
		[/if][/if][/if][/let][/let][/let][/for]
	});
	[/let][/let][/if]
});
[/file]
[/template]

[template private generateCompleteNew(aClass: Class, parameters: OrderedSet(Parameter), testValues: Sequence(String))]
const obj = new [aClass.name.toUpperFirst()/]({
	connector,
	[if (not aClass.isBlankNode())]
	semanticId: "http://example.org/obj",
	[/if]
	[for (p: Parameter | parameters) separator(',\n\t')][p.name/]: [if (not p.isPrimitive())][/if][testValues->at(i)/][/for]
});
[/template]

[template public generateNewParameter(aParameter: Parameter, aTestValue: String, aModel: Model)]
[if (not aParameter.isPrimitive())]const [aTestValue/] = [if (aParameter.isCollection())]['['/][/if]new [aParameter.getImplementation(aModel).name/]({ connector[if (not aParameter.isBlankNode())], semanticId: '[aParameter.generateSemanticId()/]'[/if] })[if (aParameter.isCollection())][']'/][/if];[/if]
[/template]

[template public generateNewParameter(aParameter: Parameter, aProperty: Property, aTestValue: String, aModel: Model)]
[if (not aParameter.isPrimitive())]const [aTestValue/] = [if (aProperty.isCollection())]['['/][/if]new [aParameter.getImplementation(aModel).name/]({ connector[if (not aParameter.isBlankNode())], semanticId: '[aParameter.generateSemanticId()/]'[/if] })[if (aProperty.isCollection())][']'/][/if];[/if]
[/template]

[template public generateSemanticId(anElement: Element)]http://base.com/[anElement.generateString(10)/][/template]
